// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TaskInfo.proto
#ifndef GRPC_TaskInfo_2eproto__INCLUDED
#define GRPC_TaskInfo_2eproto__INCLUDED

#include "TaskInfo.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

// InferWorker 服务
class InferWorkerService final {
 public:
  static constexpr char const* service_full_name() {
    return "InferWorkerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncReceiveTasksFromSchedulerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncReceiveTasksFromSchedulerRaw(context, request, cq));
    }
    virtual ::grpc::Status SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncSendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncSendKVCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncSendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncSendKVCacheDataRaw(context, request, cq));
    }
    virtual ::grpc::Status RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncRecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncRecvKVCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncRecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncRecvKVCacheDataRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutDown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncShutDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncShutDownRaw(context, request, cq));
    }
    // 关闭 infer worker
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecvKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecvKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecvKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 关闭 infer worker
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncReceiveTasksFromSchedulerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncReceiveTasksFromSchedulerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncSendKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncSendKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncRecvKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncRecvKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncReceiveTasksFromSchedulerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncReceiveTasksFromSchedulerRaw(context, request, cq));
    }
    ::grpc::Status SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncSendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncSendKVCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncSendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncSendKVCacheDataRaw(context, request, cq));
    }
    ::grpc::Status RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncRecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncRecvKVCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncRecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncRecvKVCacheDataRaw(context, request, cq));
    }
    ::grpc::Status ShutDown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncShutDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncShutDownRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReceiveTasksFromScheduler(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void SendKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void RecvKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecvKVCacheData(::grpc::ClientContext* context, const ::CombindedTaskInfo* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecvKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecvKVCacheData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncReceiveTasksFromSchedulerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncReceiveTasksFromSchedulerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncSendKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncSendKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncRecvKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncRecvKVCacheDataRaw(::grpc::ClientContext* context, const ::CombindedTaskInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveTasksFromScheduler_;
    const ::grpc::internal::RpcMethod rpcmethod_SendKVCacheData_;
    const ::grpc::internal::RpcMethod rpcmethod_RecvKVCacheData_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutDown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReceiveTasksFromScheduler(::grpc::ServerContext* context, const ::TaskInfoList* request, ::Empty* response);
    virtual ::grpc::Status SendKVCacheData(::grpc::ServerContext* context, const ::CombindedTaskInfo* request, ::Empty* response);
    virtual ::grpc::Status RecvKVCacheData(::grpc::ServerContext* context, const ::CombindedTaskInfo* request, ::Empty* response);
    virtual ::grpc::Status ShutDown(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response);
    // 关闭 infer worker
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveTasksFromScheduler : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveTasksFromScheduler() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReceiveTasksFromScheduler() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromScheduler(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveTasksFromScheduler(::grpc::ServerContext* context, ::TaskInfoList* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendKVCacheData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendKVCacheData(::grpc::ServerContext* context, ::CombindedTaskInfo* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecvKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecvKVCacheData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RecvKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvKVCacheData(::grpc::ServerContext* context, ::CombindedTaskInfo* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutDown() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutDown(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReceiveTasksFromScheduler<WithAsyncMethod_SendKVCacheData<WithAsyncMethod_RecvKVCacheData<WithAsyncMethod_ShutDown<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReceiveTasksFromScheduler : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReceiveTasksFromScheduler() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TaskInfoList* request, ::Empty* response) { return this->ReceiveTasksFromScheduler(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveTasksFromScheduler(
        ::grpc::experimental::MessageAllocator< ::TaskInfoList, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReceiveTasksFromScheduler() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromScheduler(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReceiveTasksFromScheduler(
      ::grpc::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReceiveTasksFromScheduler(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendKVCacheData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::CombindedTaskInfo, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CombindedTaskInfo* request, ::Empty* response) { return this->SendKVCacheData(context, request, response); }));}
    void SetMessageAllocatorFor_SendKVCacheData(
        ::grpc::experimental::MessageAllocator< ::CombindedTaskInfo, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::CombindedTaskInfo, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendKVCacheData(
      ::grpc::CallbackServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendKVCacheData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecvKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecvKVCacheData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::CombindedTaskInfo, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CombindedTaskInfo* request, ::Empty* response) { return this->RecvKVCacheData(context, request, response); }));}
    void SetMessageAllocatorFor_RecvKVCacheData(
        ::grpc::experimental::MessageAllocator< ::CombindedTaskInfo, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::CombindedTaskInfo, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecvKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecvKVCacheData(
      ::grpc::CallbackServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecvKVCacheData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShutDown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Empty* request, ::Empty* response) { return this->ShutDown(context, request, response); }));}
    void SetMessageAllocatorFor_ShutDown(
        ::grpc::experimental::MessageAllocator< ::Empty, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShutDown(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShutDown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ReceiveTasksFromScheduler<ExperimentalWithCallbackMethod_SendKVCacheData<ExperimentalWithCallbackMethod_RecvKVCacheData<ExperimentalWithCallbackMethod_ShutDown<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ReceiveTasksFromScheduler<ExperimentalWithCallbackMethod_SendKVCacheData<ExperimentalWithCallbackMethod_RecvKVCacheData<ExperimentalWithCallbackMethod_ShutDown<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReceiveTasksFromScheduler : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveTasksFromScheduler() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReceiveTasksFromScheduler() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromScheduler(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendKVCacheData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecvKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecvKVCacheData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RecvKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutDown() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveTasksFromScheduler : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveTasksFromScheduler() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReceiveTasksFromScheduler() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromScheduler(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveTasksFromScheduler(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendKVCacheData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendKVCacheData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecvKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecvKVCacheData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RecvKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvKVCacheData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutDown() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutDown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReceiveTasksFromScheduler : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReceiveTasksFromScheduler() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveTasksFromScheduler(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReceiveTasksFromScheduler() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromScheduler(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReceiveTasksFromScheduler(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReceiveTasksFromScheduler(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendKVCacheData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendKVCacheData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendKVCacheData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendKVCacheData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecvKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecvKVCacheData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecvKVCacheData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecvKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecvKVCacheData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecvKVCacheData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShutDown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutDown(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShutDown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShutDown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveTasksFromScheduler : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveTasksFromScheduler() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TaskInfoList, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TaskInfoList, ::Empty>* streamer) {
                       return this->StreamedReceiveTasksFromScheduler(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveTasksFromScheduler() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveTasksFromScheduler(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveTasksFromScheduler(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TaskInfoList,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendKVCacheData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CombindedTaskInfo, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::CombindedTaskInfo, ::Empty>* streamer) {
                       return this->StreamedSendKVCacheData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendKVCacheData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CombindedTaskInfo,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecvKVCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecvKVCacheData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CombindedTaskInfo, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::CombindedTaskInfo, ::Empty>* streamer) {
                       return this->StreamedRecvKVCacheData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecvKVCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecvKVCacheData(::grpc::ServerContext* /*context*/, const ::CombindedTaskInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecvKVCacheData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CombindedTaskInfo,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutDown() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Empty, ::Empty>* streamer) {
                       return this->StreamedShutDown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutDown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReceiveTasksFromScheduler<WithStreamedUnaryMethod_SendKVCacheData<WithStreamedUnaryMethod_RecvKVCacheData<WithStreamedUnaryMethod_ShutDown<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReceiveTasksFromScheduler<WithStreamedUnaryMethod_SendKVCacheData<WithStreamedUnaryMethod_RecvKVCacheData<WithStreamedUnaryMethod_ShutDown<Service > > > > StreamedService;
};

// CacheCoordinator 服务
class CacheCoordinatorService final {
 public:
  static constexpr char const* service_full_name() {
    return "CacheCoordinatorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncReceiveTasksFromInferWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncReceiveTasksFromInferWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::ComfirmationMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>> AsyncPollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>>(AsyncPollBatchFromInferWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>> PrepareAsyncPollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>>(PrepareAsyncPollBatchFromInferWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncStartProcessRequest(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncStartProcessRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncStartProcessRequest(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncStartProcessRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutDown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncShutDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncShutDownRaw(context, request, cq));
    }
    // 关闭 cache coordinator
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartProcessRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartProcessRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartProcessRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 关闭 cache coordinator
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncReceiveTasksFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncReceiveTasksFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>* AsyncPollBatchFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>* PrepareAsyncPollBatchFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncStartProcessRequestRaw(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncStartProcessRequestRaw(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncReceiveTasksFromInferWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncReceiveTasksFromInferWorkerRaw(context, request, cq));
    }
    ::grpc::Status PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::ComfirmationMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>> AsyncPollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>>(AsyncPollBatchFromInferWorkerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>> PrepareAsyncPollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>>(PrepareAsyncPollBatchFromInferWorkerRaw(context, request, cq));
    }
    ::grpc::Status StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncStartProcessRequest(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncStartProcessRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncStartProcessRequest(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncStartProcessRequestRaw(context, request, cq));
    }
    ::grpc::Status ShutDown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncShutDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncShutDownRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReceiveTasksFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) override;
      void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PollBatchFromInferWorker(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void StartProcessRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartProcessRequest(::grpc::ClientContext* context, const ::StartRequest* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartProcessRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartProcessRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncReceiveTasksFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncReceiveTasksFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>* AsyncPollBatchFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>* PrepareAsyncPollBatchFromInferWorkerRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncStartProcessRequestRaw(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncStartProcessRequestRaw(::grpc::ClientContext* context, const ::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveTasksFromInferWorker_;
    const ::grpc::internal::RpcMethod rpcmethod_PollBatchFromInferWorker_;
    const ::grpc::internal::RpcMethod rpcmethod_StartProcessRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutDown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ServerContext* context, const ::TaskInfoList* request, ::Empty* response);
    virtual ::grpc::Status PollBatchFromInferWorker(::grpc::ServerContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response);
    virtual ::grpc::Status StartProcessRequest(::grpc::ServerContext* context, const ::StartRequest* request, ::Empty* response);
    virtual ::grpc::Status ShutDown(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response);
    // 关闭 cache coordinator
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveTasksFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveTasksFromInferWorker() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReceiveTasksFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveTasksFromInferWorker(::grpc::ServerContext* context, ::TaskInfoList* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PollBatchFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PollBatchFromInferWorker() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PollBatchFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollBatchFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollBatchFromInferWorker(::grpc::ServerContext* context, ::TaskInfoList* request, ::grpc::ServerAsyncResponseWriter< ::ComfirmationMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartProcessRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StartProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessRequest(::grpc::ServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartProcessRequest(::grpc::ServerContext* context, ::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutDown() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutDown(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReceiveTasksFromInferWorker<WithAsyncMethod_PollBatchFromInferWorker<WithAsyncMethod_StartProcessRequest<WithAsyncMethod_ShutDown<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReceiveTasksFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReceiveTasksFromInferWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TaskInfoList* request, ::Empty* response) { return this->ReceiveTasksFromInferWorker(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveTasksFromInferWorker(
        ::grpc::experimental::MessageAllocator< ::TaskInfoList, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReceiveTasksFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReceiveTasksFromInferWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReceiveTasksFromInferWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PollBatchFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PollBatchFromInferWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::ComfirmationMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TaskInfoList* request, ::ComfirmationMessage* response) { return this->PollBatchFromInferWorker(context, request, response); }));}
    void SetMessageAllocatorFor_PollBatchFromInferWorker(
        ::grpc::experimental::MessageAllocator< ::TaskInfoList, ::ComfirmationMessage>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::ComfirmationMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PollBatchFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollBatchFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PollBatchFromInferWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PollBatchFromInferWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartProcessRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StartRequest, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StartRequest* request, ::Empty* response) { return this->StartProcessRequest(context, request, response); }));}
    void SetMessageAllocatorFor_StartProcessRequest(
        ::grpc::experimental::MessageAllocator< ::StartRequest, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StartRequest, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessRequest(::grpc::ServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartProcessRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartProcessRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShutDown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Empty* request, ::Empty* response) { return this->ShutDown(context, request, response); }));}
    void SetMessageAllocatorFor_ShutDown(
        ::grpc::experimental::MessageAllocator< ::Empty, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShutDown(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShutDown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ReceiveTasksFromInferWorker<ExperimentalWithCallbackMethod_PollBatchFromInferWorker<ExperimentalWithCallbackMethod_StartProcessRequest<ExperimentalWithCallbackMethod_ShutDown<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ReceiveTasksFromInferWorker<ExperimentalWithCallbackMethod_PollBatchFromInferWorker<ExperimentalWithCallbackMethod_StartProcessRequest<ExperimentalWithCallbackMethod_ShutDown<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReceiveTasksFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveTasksFromInferWorker() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReceiveTasksFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PollBatchFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PollBatchFromInferWorker() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PollBatchFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollBatchFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartProcessRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StartProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessRequest(::grpc::ServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutDown() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveTasksFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveTasksFromInferWorker() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReceiveTasksFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveTasksFromInferWorker(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PollBatchFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PollBatchFromInferWorker() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PollBatchFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollBatchFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollBatchFromInferWorker(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartProcessRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StartProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessRequest(::grpc::ServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartProcessRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutDown() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutDown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReceiveTasksFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReceiveTasksFromInferWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveTasksFromInferWorker(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReceiveTasksFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReceiveTasksFromInferWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReceiveTasksFromInferWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PollBatchFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PollBatchFromInferWorker() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PollBatchFromInferWorker(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PollBatchFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollBatchFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PollBatchFromInferWorker(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PollBatchFromInferWorker(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartProcessRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartProcessRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcessRequest(::grpc::ServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartProcessRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartProcessRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShutDown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutDown(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShutDown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShutDown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveTasksFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveTasksFromInferWorker() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TaskInfoList, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TaskInfoList, ::Empty>* streamer) {
                       return this->StreamedReceiveTasksFromInferWorker(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveTasksFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveTasksFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveTasksFromInferWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TaskInfoList,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PollBatchFromInferWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PollBatchFromInferWorker() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TaskInfoList, ::ComfirmationMessage>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TaskInfoList, ::ComfirmationMessage>* streamer) {
                       return this->StreamedPollBatchFromInferWorker(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PollBatchFromInferWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PollBatchFromInferWorker(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPollBatchFromInferWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TaskInfoList,::ComfirmationMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartProcessRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StartRequest, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::StartRequest, ::Empty>* streamer) {
                       return this->StreamedStartProcessRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartProcessRequest(::grpc::ServerContext* /*context*/, const ::StartRequest* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartProcessRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartRequest,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutDown() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Empty, ::Empty>* streamer) {
                       return this->StreamedShutDown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutDown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReceiveTasksFromInferWorker<WithStreamedUnaryMethod_PollBatchFromInferWorker<WithStreamedUnaryMethod_StartProcessRequest<WithStreamedUnaryMethod_ShutDown<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReceiveTasksFromInferWorker<WithStreamedUnaryMethod_PollBatchFromInferWorker<WithStreamedUnaryMethod_StartProcessRequest<WithStreamedUnaryMethod_ShutDown<Service > > > > StreamedService;
};

// KVCache 服务
class KVCacheService final {
 public:
  static constexpr char const* service_full_name() {
    return "KVCacheService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList& request, ::ComfirmationMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>> AsyncReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>>(AsyncReceiveTasksFromCoordinatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>> PrepareAsyncReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>>(PrepareAsyncReceiveTasksFromCoordinatorRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutDown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncShutDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncShutDownRaw(context, request, cq));
    }
    // 关闭 KVCache
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 关闭 KVCache
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>* AsyncReceiveTasksFromCoordinatorRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ComfirmationMessage>* PrepareAsyncReceiveTasksFromCoordinatorRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList& request, ::ComfirmationMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>> AsyncReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>>(AsyncReceiveTasksFromCoordinatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>> PrepareAsyncReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>>(PrepareAsyncReceiveTasksFromCoordinatorRaw(context, request, cq));
    }
    ::grpc::Status ShutDown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncShutDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncShutDown(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncShutDownRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) override;
      void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReceiveTasksFromCoordinator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ComfirmationMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShutDown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>* AsyncReceiveTasksFromCoordinatorRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ComfirmationMessage>* PrepareAsyncReceiveTasksFromCoordinatorRaw(::grpc::ClientContext* context, const ::TaskInfoList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveTasksFromCoordinator_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutDown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ServerContext* context, const ::TaskInfoList* request, ::ComfirmationMessage* response);
    virtual ::grpc::Status ShutDown(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response);
    // 关闭 KVCache
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveTasksFromCoordinator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveTasksFromCoordinator() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReceiveTasksFromCoordinator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveTasksFromCoordinator(::grpc::ServerContext* context, ::TaskInfoList* request, ::grpc::ServerAsyncResponseWriter< ::ComfirmationMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutDown() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutDown(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReceiveTasksFromCoordinator<WithAsyncMethod_ShutDown<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReceiveTasksFromCoordinator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReceiveTasksFromCoordinator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::ComfirmationMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TaskInfoList* request, ::ComfirmationMessage* response) { return this->ReceiveTasksFromCoordinator(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveTasksFromCoordinator(
        ::grpc::experimental::MessageAllocator< ::TaskInfoList, ::ComfirmationMessage>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TaskInfoList, ::ComfirmationMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReceiveTasksFromCoordinator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReceiveTasksFromCoordinator(
      ::grpc::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReceiveTasksFromCoordinator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShutDown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Empty* request, ::Empty* response) { return this->ShutDown(context, request, response); }));}
    void SetMessageAllocatorFor_ShutDown(
        ::grpc::experimental::MessageAllocator< ::Empty, ::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShutDown(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShutDown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ReceiveTasksFromCoordinator<ExperimentalWithCallbackMethod_ShutDown<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ReceiveTasksFromCoordinator<ExperimentalWithCallbackMethod_ShutDown<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReceiveTasksFromCoordinator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveTasksFromCoordinator() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReceiveTasksFromCoordinator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutDown() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveTasksFromCoordinator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveTasksFromCoordinator() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReceiveTasksFromCoordinator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveTasksFromCoordinator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutDown() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutDown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReceiveTasksFromCoordinator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReceiveTasksFromCoordinator() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveTasksFromCoordinator(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReceiveTasksFromCoordinator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReceiveTasksFromCoordinator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReceiveTasksFromCoordinator(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShutDown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutDown(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShutDown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShutDown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveTasksFromCoordinator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveTasksFromCoordinator() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TaskInfoList, ::ComfirmationMessage>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TaskInfoList, ::ComfirmationMessage>* streamer) {
                       return this->StreamedReceiveTasksFromCoordinator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveTasksFromCoordinator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveTasksFromCoordinator(::grpc::ServerContext* /*context*/, const ::TaskInfoList* /*request*/, ::ComfirmationMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveTasksFromCoordinator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TaskInfoList,::ComfirmationMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutDown() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Empty, ::Empty>* streamer) {
                       return this->StreamedShutDown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutDown(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutDown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReceiveTasksFromCoordinator<WithStreamedUnaryMethod_ShutDown<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReceiveTasksFromCoordinator<WithStreamedUnaryMethod_ShutDown<Service > > StreamedService;
};


#endif  // GRPC_TaskInfo_2eproto__INCLUDED

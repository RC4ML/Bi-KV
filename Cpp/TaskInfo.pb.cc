// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskInfo.proto

#include "TaskInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR IdTokenPair::IdTokenPair(
    ::_pbi::ConstantInitialized)
  : id_(0)
  , token_num_(0){}
struct IdTokenPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdTokenPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdTokenPairDefaultTypeInternal() {}
  union {
    IdTokenPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdTokenPairDefaultTypeInternal _IdTokenPair_default_instance_;
PROTOBUF_CONSTEXPR TaskInfo::TaskInfo(
    ::_pbi::ConstantInitialized)
  : cache_pages_list_()
  , _cache_pages_list_cached_byte_size_(0)
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_id_(0)
  , id_(0)
  , infer_worker_(0)
  , cache_worker_(0)
  , token_num_(0)
  , index_(0)
  , task_type_(0)
  , task_num_(0){}
struct TaskInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskInfoDefaultTypeInternal() {}
  union {
    TaskInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
PROTOBUF_CONSTEXPR CombindedTaskInfo::CombindedTaskInfo(
    ::_pbi::ConstantInitialized)
  : cache_pages_list_()
  , id_token_pair_()
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_id_(0)
  , id_(0)
  , infer_worker_(0)
  , cache_worker_(0)
  , token_num_(0)
  , index_(0)
  , task_type_(0)
  , task_num_(0){}
struct CombindedTaskInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CombindedTaskInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CombindedTaskInfoDefaultTypeInternal() {}
  union {
    CombindedTaskInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CombindedTaskInfoDefaultTypeInternal _CombindedTaskInfo_default_instance_;
PROTOBUF_CONSTEXPR PageList::PageList(
    ::_pbi::ConstantInitialized)
  : cache_pages_list_()
  , _cache_pages_list_cached_byte_size_(0){}
struct PageListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageListDefaultTypeInternal() {}
  union {
    PageList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageListDefaultTypeInternal _PageList_default_instance_;
PROTOBUF_CONSTEXPR TaskInfoList::TaskInfoList(
    ::_pbi::ConstantInitialized)
  : tasks_(){}
struct TaskInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskInfoListDefaultTypeInternal() {}
  union {
    TaskInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskInfoListDefaultTypeInternal _TaskInfoList_default_instance_;
PROTOBUF_CONSTEXPR ComfirmationMessage::ComfirmationMessage(
    ::_pbi::ConstantInitialized)
  : msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ComfirmationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComfirmationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComfirmationMessageDefaultTypeInternal() {}
  union {
    ComfirmationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComfirmationMessageDefaultTypeInternal _ComfirmationMessage_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized){}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR StartRequest::StartRequest(
    ::_pbi::ConstantInitialized)
  : msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct StartRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRequestDefaultTypeInternal() {}
  union {
    StartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRequestDefaultTypeInternal _StartRequest_default_instance_;
static ::_pb::Metadata file_level_metadata_TaskInfo_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TaskInfo_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TaskInfo_2eproto = nullptr;

const uint32_t TableStruct_TaskInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IdTokenPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IdTokenPair, id_),
  PROTOBUF_FIELD_OFFSET(::IdTokenPair, token_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TaskInfo, request_id_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, id_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, infer_worker_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, cache_worker_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, token_num_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, index_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, task_type_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, type_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, task_num_),
  PROTOBUF_FIELD_OFFSET(::TaskInfo, cache_pages_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, request_id_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, id_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, infer_worker_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, cache_worker_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, token_num_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, index_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, task_type_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, type_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, task_num_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, cache_pages_list_),
  PROTOBUF_FIELD_OFFSET(::CombindedTaskInfo, id_token_pair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PageList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PageList, cache_pages_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TaskInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TaskInfoList, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ComfirmationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ComfirmationMessage, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartRequest, msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IdTokenPair)},
  { 8, -1, -1, sizeof(::TaskInfo)},
  { 24, -1, -1, sizeof(::CombindedTaskInfo)},
  { 41, -1, -1, sizeof(::PageList)},
  { 48, -1, -1, sizeof(::TaskInfoList)},
  { 55, -1, -1, sizeof(::ComfirmationMessage)},
  { 62, -1, -1, sizeof(::Empty)},
  { 68, -1, -1, sizeof(::StartRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_IdTokenPair_default_instance_._instance,
  &::_TaskInfo_default_instance_._instance,
  &::_CombindedTaskInfo_default_instance_._instance,
  &::_PageList_default_instance_._instance,
  &::_TaskInfoList_default_instance_._instance,
  &::_ComfirmationMessage_default_instance_._instance,
  &::_Empty_default_instance_._instance,
  &::_StartRequest_default_instance_._instance,
};

const char descriptor_table_protodef_TaskInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016TaskInfo.proto\",\n\013IdTokenPair\022\n\n\002id\030\001 "
  "\001(\005\022\021\n\ttoken_num\030\002 \001(\005\"\305\001\n\010TaskInfo\022\022\n\nr"
  "equest_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\024\n\014infer_wor"
  "ker\030\003 \001(\005\022\024\n\014cache_worker\030\004 \001(\005\022\021\n\ttoken"
  "_num\030\005 \001(\005\022\r\n\005index\030\006 \001(\005\022\021\n\ttask_type\030\007"
  " \001(\005\022\014\n\004type\030\010 \001(\t\022\020\n\010task_num\030\t \001(\005\022\030\n\020"
  "cache_pages_list\030\n \003(\005\"\376\001\n\021CombindedTask"
  "Info\022\022\n\nrequest_id\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\024\n\014"
  "infer_worker\030\003 \001(\005\022\024\n\014cache_worker\030\004 \001(\005"
  "\022\021\n\ttoken_num\030\005 \001(\005\022\r\n\005index\030\006 \001(\005\022\021\n\tta"
  "sk_type\030\007 \001(\005\022\014\n\004type\030\010 \001(\t\022\020\n\010task_num\030"
  "\t \001(\005\022#\n\020cache_pages_list\030\n \003(\0132\t.PageLi"
  "st\022#\n\rid_token_pair\030\013 \003(\0132\014.IdTokenPair\""
  "$\n\010PageList\022\030\n\020cache_pages_list\030\001 \003(\005\"(\n"
  "\014TaskInfoList\022\030\n\005tasks\030\001 \003(\0132\t.TaskInfo\""
  "\"\n\023ComfirmationMessage\022\013\n\003msg\030\001 \001(\t\"\007\n\005E"
  "mpty\"\033\n\014StartRequest\022\013\n\003msg\030\001 \001(\t*s\n\006Sig"
  "nal\022\017\n\013SIGNAL_SEND\020\000\022\017\n\013SIGNAL_RECV\020\001\022\016\n"
  "\nSIGNAL_ACK\020\002\022\020\n\014SIGNAL_CHECK\020\003\022\017\n\013SIGNA"
  "L_SKIP\020\004\022\024\n\020SIGNAL_TERMINATE\020\t2\302\001\n\022Infer"
  "WorkerService\0222\n\031ReceiveTasksFromSchedul"
  "er\022\r.TaskInfoList\032\006.Empty\022-\n\017SendKVCache"
  "Data\022\022.CombindedTaskInfo\032\006.Empty\022-\n\017Recv"
  "KVCacheData\022\022.CombindedTaskInfo\032\006.Empty\022"
  "\032\n\010ShutDown\022\006.Empty\032\006.Empty2\332\001\n\027CacheCoo"
  "rdinatorService\0224\n\033ReceiveTasksFromInfer"
  "Worker\022\r.TaskInfoList\032\006.Empty\022\?\n\030PollBat"
  "chFromInferWorker\022\r.TaskInfoList\032\024.Comfi"
  "rmationMessage\022,\n\023StartProcessRequest\022\r."
  "StartRequest\032\006.Empty\022\032\n\010ShutDown\022\006.Empty"
  "\032\006.Empty2p\n\016KVCacheService\022B\n\033ReceiveTas"
  "ksFromCoordinator\022\r.TaskInfoList\032\024.Comfi"
  "rmationMessage\022\032\n\010ShutDown\022\006.Empty\032\006.Emp"
  "tyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_TaskInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TaskInfo_2eproto = {
    false, false, 1330, descriptor_table_protodef_TaskInfo_2eproto,
    "TaskInfo.proto",
    &descriptor_table_TaskInfo_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_TaskInfo_2eproto::offsets,
    file_level_metadata_TaskInfo_2eproto, file_level_enum_descriptors_TaskInfo_2eproto,
    file_level_service_descriptors_TaskInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TaskInfo_2eproto_getter() {
  return &descriptor_table_TaskInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TaskInfo_2eproto(&descriptor_table_TaskInfo_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TaskInfo_2eproto);
  return file_level_enum_descriptors_TaskInfo_2eproto[0];
}
bool Signal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class IdTokenPair::_Internal {
 public:
};

IdTokenPair::IdTokenPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:IdTokenPair)
}
IdTokenPair::IdTokenPair(const IdTokenPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(token_num_));
  // @@protoc_insertion_point(copy_constructor:IdTokenPair)
}

inline void IdTokenPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&token_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(token_num_));
}

IdTokenPair::~IdTokenPair() {
  // @@protoc_insertion_point(destructor:IdTokenPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdTokenPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdTokenPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdTokenPair::Clear() {
// @@protoc_insertion_point(message_clear_start:IdTokenPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(token_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdTokenPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 token_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          token_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdTokenPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IdTokenPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 token_num = 2;
  if (this->_internal_token_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_token_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IdTokenPair)
  return target;
}

size_t IdTokenPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IdTokenPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 token_num = 2;
  if (this->_internal_token_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdTokenPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdTokenPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdTokenPair::GetClassData() const { return &_class_data_; }

void IdTokenPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IdTokenPair *>(to)->MergeFrom(
      static_cast<const IdTokenPair &>(from));
}


void IdTokenPair::MergeFrom(const IdTokenPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IdTokenPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_token_num() != 0) {
    _internal_set_token_num(from._internal_token_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdTokenPair::CopyFrom(const IdTokenPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IdTokenPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdTokenPair::IsInitialized() const {
  return true;
}

void IdTokenPair::InternalSwap(IdTokenPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdTokenPair, token_num_)
      + sizeof(IdTokenPair::token_num_)
      - PROTOBUF_FIELD_OFFSET(IdTokenPair, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdTokenPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[0]);
}

// ===================================================================

class TaskInfo::_Internal {
 public:
};

TaskInfo::TaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cache_pages_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cache_pages_list_(from.cache_pages_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_num_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(task_num_));
  // @@protoc_insertion_point(copy_constructor:TaskInfo)
}

inline void TaskInfo::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&task_num_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(task_num_));
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:TaskInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
}

void TaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cache_pages_list_.Clear();
  type_.ClearToEmpty();
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_num_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(task_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 infer_worker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          infer_worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cache_worker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          cache_worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 token_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          token_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          task_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TaskInfo.type"));
        } else
          goto handle_unusual;
        continue;
      // int32 task_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          task_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 cache_pages_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cache_pages_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_cache_pages_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_request_id(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 infer_worker = 3;
  if (this->_internal_infer_worker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_infer_worker(), target);
  }

  // int32 cache_worker = 4;
  if (this->_internal_cache_worker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cache_worker(), target);
  }

  // int32 token_num = 5;
  if (this->_internal_token_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_token_num(), target);
  }

  // int32 index = 6;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_index(), target);
  }

  // int32 task_type = 7;
  if (this->_internal_task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_task_type(), target);
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TaskInfo.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // int32 task_num = 9;
  if (this->_internal_task_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_task_num(), target);
  }

  // repeated int32 cache_pages_list = 10;
  {
    int byte_size = _cache_pages_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_cache_pages_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskInfo)
  return target;
}

size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cache_pages_list = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->cache_pages_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _cache_pages_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 infer_worker = 3;
  if (this->_internal_infer_worker() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_infer_worker());
  }

  // int32 cache_worker = 4;
  if (this->_internal_cache_worker() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cache_worker());
  }

  // int32 token_num = 5;
  if (this->_internal_token_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_num());
  }

  // int32 index = 6;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 task_type = 7;
  if (this->_internal_task_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_type());
  }

  // int32 task_num = 9;
  if (this->_internal_task_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskInfo::GetClassData() const { return &_class_data_; }

void TaskInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskInfo *>(to)->MergeFrom(
      static_cast<const TaskInfo &>(from));
}


void TaskInfo::MergeFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cache_pages_list_.MergeFrom(from.cache_pages_list_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_infer_worker() != 0) {
    _internal_set_infer_worker(from._internal_infer_worker());
  }
  if (from._internal_cache_worker() != 0) {
    _internal_set_cache_worker(from._internal_cache_worker());
  }
  if (from._internal_token_num() != 0) {
    _internal_set_token_num(from._internal_token_num());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_task_type() != 0) {
    _internal_set_task_type(from._internal_task_type());
  }
  if (from._internal_task_num() != 0) {
    _internal_set_task_num(from._internal_task_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::InternalSwap(TaskInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cache_pages_list_.InternalSwap(&other->cache_pages_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskInfo, task_num_)
      + sizeof(TaskInfo::task_num_)
      - PROTOBUF_FIELD_OFFSET(TaskInfo, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[1]);
}

// ===================================================================

class CombindedTaskInfo::_Internal {
 public:
};

CombindedTaskInfo::CombindedTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cache_pages_list_(arena),
  id_token_pair_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CombindedTaskInfo)
}
CombindedTaskInfo::CombindedTaskInfo(const CombindedTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cache_pages_list_(from.cache_pages_list_),
      id_token_pair_(from.id_token_pair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_num_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(task_num_));
  // @@protoc_insertion_point(copy_constructor:CombindedTaskInfo)
}

inline void CombindedTaskInfo::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&task_num_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(task_num_));
}

CombindedTaskInfo::~CombindedTaskInfo() {
  // @@protoc_insertion_point(destructor:CombindedTaskInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CombindedTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
}

void CombindedTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CombindedTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CombindedTaskInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cache_pages_list_.Clear();
  id_token_pair_.Clear();
  type_.ClearToEmpty();
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_num_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(task_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CombindedTaskInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 infer_worker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          infer_worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cache_worker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          cache_worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 token_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          token_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          task_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CombindedTaskInfo.type"));
        } else
          goto handle_unusual;
        continue;
      // int32 task_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          task_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PageList cache_pages_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cache_pages_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .IdTokenPair id_token_pair = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_token_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CombindedTaskInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CombindedTaskInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_request_id(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 infer_worker = 3;
  if (this->_internal_infer_worker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_infer_worker(), target);
  }

  // int32 cache_worker = 4;
  if (this->_internal_cache_worker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cache_worker(), target);
  }

  // int32 token_num = 5;
  if (this->_internal_token_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_token_num(), target);
  }

  // int32 index = 6;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_index(), target);
  }

  // int32 task_type = 7;
  if (this->_internal_task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_task_type(), target);
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CombindedTaskInfo.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // int32 task_num = 9;
  if (this->_internal_task_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_task_num(), target);
  }

  // repeated .PageList cache_pages_list = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cache_pages_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_cache_pages_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .IdTokenPair id_token_pair = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_id_token_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_id_token_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CombindedTaskInfo)
  return target;
}

size_t CombindedTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CombindedTaskInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PageList cache_pages_list = 10;
  total_size += 1UL * this->_internal_cache_pages_list_size();
  for (const auto& msg : this->cache_pages_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .IdTokenPair id_token_pair = 11;
  total_size += 1UL * this->_internal_id_token_pair_size();
  for (const auto& msg : this->id_token_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 8;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 infer_worker = 3;
  if (this->_internal_infer_worker() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_infer_worker());
  }

  // int32 cache_worker = 4;
  if (this->_internal_cache_worker() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cache_worker());
  }

  // int32 token_num = 5;
  if (this->_internal_token_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_num());
  }

  // int32 index = 6;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 task_type = 7;
  if (this->_internal_task_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_type());
  }

  // int32 task_num = 9;
  if (this->_internal_task_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CombindedTaskInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CombindedTaskInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CombindedTaskInfo::GetClassData() const { return &_class_data_; }

void CombindedTaskInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CombindedTaskInfo *>(to)->MergeFrom(
      static_cast<const CombindedTaskInfo &>(from));
}


void CombindedTaskInfo::MergeFrom(const CombindedTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CombindedTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cache_pages_list_.MergeFrom(from.cache_pages_list_);
  id_token_pair_.MergeFrom(from.id_token_pair_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_infer_worker() != 0) {
    _internal_set_infer_worker(from._internal_infer_worker());
  }
  if (from._internal_cache_worker() != 0) {
    _internal_set_cache_worker(from._internal_cache_worker());
  }
  if (from._internal_token_num() != 0) {
    _internal_set_token_num(from._internal_token_num());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_task_type() != 0) {
    _internal_set_task_type(from._internal_task_type());
  }
  if (from._internal_task_num() != 0) {
    _internal_set_task_num(from._internal_task_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CombindedTaskInfo::CopyFrom(const CombindedTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CombindedTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombindedTaskInfo::IsInitialized() const {
  return true;
}

void CombindedTaskInfo::InternalSwap(CombindedTaskInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cache_pages_list_.InternalSwap(&other->cache_pages_list_);
  id_token_pair_.InternalSwap(&other->id_token_pair_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CombindedTaskInfo, task_num_)
      + sizeof(CombindedTaskInfo::task_num_)
      - PROTOBUF_FIELD_OFFSET(CombindedTaskInfo, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CombindedTaskInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[2]);
}

// ===================================================================

class PageList::_Internal {
 public:
};

PageList::PageList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cache_pages_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:PageList)
}
PageList::PageList(const PageList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cache_pages_list_(from.cache_pages_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PageList)
}

inline void PageList::SharedCtor() {
}

PageList::~PageList() {
  // @@protoc_insertion_point(destructor:PageList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PageList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageList::Clear() {
// @@protoc_insertion_point(message_clear_start:PageList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cache_pages_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 cache_pages_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cache_pages_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_cache_pages_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PageList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cache_pages_list = 1;
  {
    int byte_size = _cache_pages_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_cache_pages_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PageList)
  return target;
}

size_t PageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PageList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cache_pages_list = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->cache_pages_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _cache_pages_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PageList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PageList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PageList::GetClassData() const { return &_class_data_; }

void PageList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PageList *>(to)->MergeFrom(
      static_cast<const PageList &>(from));
}


void PageList::MergeFrom(const PageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PageList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cache_pages_list_.MergeFrom(from.cache_pages_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PageList::CopyFrom(const PageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageList::IsInitialized() const {
  return true;
}

void PageList::InternalSwap(PageList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cache_pages_list_.InternalSwap(&other->cache_pages_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[3]);
}

// ===================================================================

class TaskInfoList::_Internal {
 public:
};

TaskInfoList::TaskInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TaskInfoList)
}
TaskInfoList::TaskInfoList(const TaskInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskInfoList)
}

inline void TaskInfoList::SharedCtor() {
}

TaskInfoList::~TaskInfoList() {
  // @@protoc_insertion_point(destructor:TaskInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TaskInfo tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TaskInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TaskInfo tasks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskInfoList)
  return target;
}

size_t TaskInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TaskInfo tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskInfoList::GetClassData() const { return &_class_data_; }

void TaskInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskInfoList *>(to)->MergeFrom(
      static_cast<const TaskInfoList &>(from));
}


void TaskInfoList::MergeFrom(const TaskInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskInfoList::CopyFrom(const TaskInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfoList::IsInitialized() const {
  return true;
}

void TaskInfoList::InternalSwap(TaskInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[4]);
}

// ===================================================================

class ComfirmationMessage::_Internal {
 public:
};

ComfirmationMessage::ComfirmationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ComfirmationMessage)
}
ComfirmationMessage::ComfirmationMessage(const ComfirmationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ComfirmationMessage)
}

inline void ComfirmationMessage::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComfirmationMessage::~ComfirmationMessage() {
  // @@protoc_insertion_point(destructor:ComfirmationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComfirmationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.Destroy();
}

void ComfirmationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComfirmationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ComfirmationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComfirmationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ComfirmationMessage.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComfirmationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComfirmationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ComfirmationMessage.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComfirmationMessage)
  return target;
}

size_t ComfirmationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComfirmationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComfirmationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComfirmationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComfirmationMessage::GetClassData() const { return &_class_data_; }

void ComfirmationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComfirmationMessage *>(to)->MergeFrom(
      static_cast<const ComfirmationMessage &>(from));
}


void ComfirmationMessage::MergeFrom(const ComfirmationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ComfirmationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComfirmationMessage::CopyFrom(const ComfirmationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComfirmationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComfirmationMessage::IsInitialized() const {
  return true;
}

void ComfirmationMessage::InternalSwap(ComfirmationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ComfirmationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[5]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[6]);
}

// ===================================================================

class StartRequest::_Internal {
 public:
};

StartRequest::StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:StartRequest)
}
StartRequest::StartRequest(const StartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StartRequest)
}

inline void StartRequest::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:StartRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.Destroy();
}

void StartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StartRequest.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartRequest.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRequest::GetClassData() const { return &_class_data_; }

void StartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRequest *>(to)->MergeFrom(
      static_cast<const StartRequest &>(from));
}


void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {
  return true;
}

void StartRequest::InternalSwap(StartRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TaskInfo_2eproto_getter, &descriptor_table_TaskInfo_2eproto_once,
      file_level_metadata_TaskInfo_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IdTokenPair*
Arena::CreateMaybeMessage< ::IdTokenPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IdTokenPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskInfo*
Arena::CreateMaybeMessage< ::TaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CombindedTaskInfo*
Arena::CreateMaybeMessage< ::CombindedTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CombindedTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PageList*
Arena::CreateMaybeMessage< ::PageList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PageList >(arena);
}
template<> PROTOBUF_NOINLINE ::TaskInfoList*
Arena::CreateMaybeMessage< ::TaskInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TaskInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::ComfirmationMessage*
Arena::CreateMaybeMessage< ::ComfirmationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComfirmationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Empty*
Arena::CreateMaybeMessage< ::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::StartRequest*
Arena::CreateMaybeMessage< ::StartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

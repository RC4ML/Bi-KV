// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TaskInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TaskInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TaskInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TaskInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TaskInfo_2eproto;
class CombindedTaskInfo;
struct CombindedTaskInfoDefaultTypeInternal;
extern CombindedTaskInfoDefaultTypeInternal _CombindedTaskInfo_default_instance_;
class ComfirmationMessage;
struct ComfirmationMessageDefaultTypeInternal;
extern ComfirmationMessageDefaultTypeInternal _ComfirmationMessage_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class IdTokenPair;
struct IdTokenPairDefaultTypeInternal;
extern IdTokenPairDefaultTypeInternal _IdTokenPair_default_instance_;
class PageList;
struct PageListDefaultTypeInternal;
extern PageListDefaultTypeInternal _PageList_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class TaskInfo;
struct TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
class TaskInfoList;
struct TaskInfoListDefaultTypeInternal;
extern TaskInfoListDefaultTypeInternal _TaskInfoList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CombindedTaskInfo* Arena::CreateMaybeMessage<::CombindedTaskInfo>(Arena*);
template<> ::ComfirmationMessage* Arena::CreateMaybeMessage<::ComfirmationMessage>(Arena*);
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::IdTokenPair* Arena::CreateMaybeMessage<::IdTokenPair>(Arena*);
template<> ::PageList* Arena::CreateMaybeMessage<::PageList>(Arena*);
template<> ::StartRequest* Arena::CreateMaybeMessage<::StartRequest>(Arena*);
template<> ::TaskInfo* Arena::CreateMaybeMessage<::TaskInfo>(Arena*);
template<> ::TaskInfoList* Arena::CreateMaybeMessage<::TaskInfoList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Signal : int {
  SIGNAL_SEND = 0,
  SIGNAL_RECV = 1,
  SIGNAL_ACK = 2,
  SIGNAL_CHECK = 3,
  SIGNAL_SKIP = 4,
  SIGNAL_TERMINATE = 9,
  Signal_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Signal_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Signal_IsValid(int value);
constexpr Signal Signal_MIN = SIGNAL_SEND;
constexpr Signal Signal_MAX = SIGNAL_TERMINATE;
constexpr int Signal_ARRAYSIZE = Signal_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signal_descriptor();
template<typename T>
inline const std::string& Signal_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Signal>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Signal_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Signal_descriptor(), enum_t_value);
}
inline bool Signal_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Signal* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Signal>(
    Signal_descriptor(), name, value);
}
// ===================================================================

class IdTokenPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IdTokenPair) */ {
 public:
  inline IdTokenPair() : IdTokenPair(nullptr) {}
  ~IdTokenPair() override;
  explicit PROTOBUF_CONSTEXPR IdTokenPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdTokenPair(const IdTokenPair& from);
  IdTokenPair(IdTokenPair&& from) noexcept
    : IdTokenPair() {
    *this = ::std::move(from);
  }

  inline IdTokenPair& operator=(const IdTokenPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdTokenPair& operator=(IdTokenPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdTokenPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdTokenPair* internal_default_instance() {
    return reinterpret_cast<const IdTokenPair*>(
               &_IdTokenPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IdTokenPair& a, IdTokenPair& b) {
    a.Swap(&b);
  }
  inline void Swap(IdTokenPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdTokenPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdTokenPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdTokenPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdTokenPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IdTokenPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdTokenPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IdTokenPair";
  }
  protected:
  explicit IdTokenPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTokenNumFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 token_num = 2;
  void clear_token_num();
  int32_t token_num() const;
  void set_token_num(int32_t value);
  private:
  int32_t _internal_token_num() const;
  void _internal_set_token_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:IdTokenPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t token_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// -------------------------------------------------------------------

class TaskInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskInfo) */ {
 public:
  inline TaskInfo() : TaskInfo(nullptr) {}
  ~TaskInfo() override;
  explicit PROTOBUF_CONSTEXPR TaskInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskInfo(const TaskInfo& from);
  TaskInfo(TaskInfo&& from) noexcept
    : TaskInfo() {
    *this = ::std::move(from);
  }

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInfo& operator=(TaskInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskInfo* internal_default_instance() {
    return reinterpret_cast<const TaskInfo*>(
               &_TaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskInfo& a, TaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskInfo";
  }
  protected:
  explicit TaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCachePagesListFieldNumber = 10,
    kTypeFieldNumber = 8,
    kRequestIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kInferWorkerFieldNumber = 3,
    kCacheWorkerFieldNumber = 4,
    kTokenNumFieldNumber = 5,
    kIndexFieldNumber = 6,
    kTaskTypeFieldNumber = 7,
    kTaskNumFieldNumber = 9,
  };
  // repeated int32 cache_pages_list = 10;
  int cache_pages_list_size() const;
  private:
  int _internal_cache_pages_list_size() const;
  public:
  void clear_cache_pages_list();
  private:
  int32_t _internal_cache_pages_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cache_pages_list() const;
  void _internal_add_cache_pages_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cache_pages_list();
  public:
  int32_t cache_pages_list(int index) const;
  void set_cache_pages_list(int index, int32_t value);
  void add_cache_pages_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cache_pages_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cache_pages_list();

  // string type = 8;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 request_id = 1;
  void clear_request_id();
  int32_t request_id() const;
  void set_request_id(int32_t value);
  private:
  int32_t _internal_request_id() const;
  void _internal_set_request_id(int32_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 infer_worker = 3;
  void clear_infer_worker();
  int32_t infer_worker() const;
  void set_infer_worker(int32_t value);
  private:
  int32_t _internal_infer_worker() const;
  void _internal_set_infer_worker(int32_t value);
  public:

  // int32 cache_worker = 4;
  void clear_cache_worker();
  int32_t cache_worker() const;
  void set_cache_worker(int32_t value);
  private:
  int32_t _internal_cache_worker() const;
  void _internal_set_cache_worker(int32_t value);
  public:

  // int32 token_num = 5;
  void clear_token_num();
  int32_t token_num() const;
  void set_token_num(int32_t value);
  private:
  int32_t _internal_token_num() const;
  void _internal_set_token_num(int32_t value);
  public:

  // int32 index = 6;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 task_type = 7;
  void clear_task_type();
  int32_t task_type() const;
  void set_task_type(int32_t value);
  private:
  int32_t _internal_task_type() const;
  void _internal_set_task_type(int32_t value);
  public:

  // int32 task_num = 9;
  void clear_task_num();
  int32_t task_num() const;
  void set_task_num(int32_t value);
  private:
  int32_t _internal_task_num() const;
  void _internal_set_task_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cache_pages_list_;
  mutable std::atomic<int> _cache_pages_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  int32_t request_id_;
  int32_t id_;
  int32_t infer_worker_;
  int32_t cache_worker_;
  int32_t token_num_;
  int32_t index_;
  int32_t task_type_;
  int32_t task_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// -------------------------------------------------------------------

class CombindedTaskInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CombindedTaskInfo) */ {
 public:
  inline CombindedTaskInfo() : CombindedTaskInfo(nullptr) {}
  ~CombindedTaskInfo() override;
  explicit PROTOBUF_CONSTEXPR CombindedTaskInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CombindedTaskInfo(const CombindedTaskInfo& from);
  CombindedTaskInfo(CombindedTaskInfo&& from) noexcept
    : CombindedTaskInfo() {
    *this = ::std::move(from);
  }

  inline CombindedTaskInfo& operator=(const CombindedTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CombindedTaskInfo& operator=(CombindedTaskInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CombindedTaskInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CombindedTaskInfo* internal_default_instance() {
    return reinterpret_cast<const CombindedTaskInfo*>(
               &_CombindedTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CombindedTaskInfo& a, CombindedTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CombindedTaskInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CombindedTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CombindedTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CombindedTaskInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CombindedTaskInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CombindedTaskInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CombindedTaskInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CombindedTaskInfo";
  }
  protected:
  explicit CombindedTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCachePagesListFieldNumber = 10,
    kIdTokenPairFieldNumber = 11,
    kTypeFieldNumber = 8,
    kRequestIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kInferWorkerFieldNumber = 3,
    kCacheWorkerFieldNumber = 4,
    kTokenNumFieldNumber = 5,
    kIndexFieldNumber = 6,
    kTaskTypeFieldNumber = 7,
    kTaskNumFieldNumber = 9,
  };
  // repeated .PageList cache_pages_list = 10;
  int cache_pages_list_size() const;
  private:
  int _internal_cache_pages_list_size() const;
  public:
  void clear_cache_pages_list();
  ::PageList* mutable_cache_pages_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PageList >*
      mutable_cache_pages_list();
  private:
  const ::PageList& _internal_cache_pages_list(int index) const;
  ::PageList* _internal_add_cache_pages_list();
  public:
  const ::PageList& cache_pages_list(int index) const;
  ::PageList* add_cache_pages_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PageList >&
      cache_pages_list() const;

  // repeated .IdTokenPair id_token_pair = 11;
  int id_token_pair_size() const;
  private:
  int _internal_id_token_pair_size() const;
  public:
  void clear_id_token_pair();
  ::IdTokenPair* mutable_id_token_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IdTokenPair >*
      mutable_id_token_pair();
  private:
  const ::IdTokenPair& _internal_id_token_pair(int index) const;
  ::IdTokenPair* _internal_add_id_token_pair();
  public:
  const ::IdTokenPair& id_token_pair(int index) const;
  ::IdTokenPair* add_id_token_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IdTokenPair >&
      id_token_pair() const;

  // string type = 8;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 request_id = 1;
  void clear_request_id();
  int32_t request_id() const;
  void set_request_id(int32_t value);
  private:
  int32_t _internal_request_id() const;
  void _internal_set_request_id(int32_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 infer_worker = 3;
  void clear_infer_worker();
  int32_t infer_worker() const;
  void set_infer_worker(int32_t value);
  private:
  int32_t _internal_infer_worker() const;
  void _internal_set_infer_worker(int32_t value);
  public:

  // int32 cache_worker = 4;
  void clear_cache_worker();
  int32_t cache_worker() const;
  void set_cache_worker(int32_t value);
  private:
  int32_t _internal_cache_worker() const;
  void _internal_set_cache_worker(int32_t value);
  public:

  // int32 token_num = 5;
  void clear_token_num();
  int32_t token_num() const;
  void set_token_num(int32_t value);
  private:
  int32_t _internal_token_num() const;
  void _internal_set_token_num(int32_t value);
  public:

  // int32 index = 6;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 task_type = 7;
  void clear_task_type();
  int32_t task_type() const;
  void set_task_type(int32_t value);
  private:
  int32_t _internal_task_type() const;
  void _internal_set_task_type(int32_t value);
  public:

  // int32 task_num = 9;
  void clear_task_num();
  int32_t task_num() const;
  void set_task_num(int32_t value);
  private:
  int32_t _internal_task_num() const;
  void _internal_set_task_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CombindedTaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PageList > cache_pages_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IdTokenPair > id_token_pair_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  int32_t request_id_;
  int32_t id_;
  int32_t infer_worker_;
  int32_t cache_worker_;
  int32_t token_num_;
  int32_t index_;
  int32_t task_type_;
  int32_t task_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// -------------------------------------------------------------------

class PageList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PageList) */ {
 public:
  inline PageList() : PageList(nullptr) {}
  ~PageList() override;
  explicit PROTOBUF_CONSTEXPR PageList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageList(const PageList& from);
  PageList(PageList&& from) noexcept
    : PageList() {
    *this = ::std::move(from);
  }

  inline PageList& operator=(const PageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageList& operator=(PageList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageList* internal_default_instance() {
    return reinterpret_cast<const PageList*>(
               &_PageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PageList& a, PageList& b) {
    a.Swap(&b);
  }
  inline void Swap(PageList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PageList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PageList";
  }
  protected:
  explicit PageList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCachePagesListFieldNumber = 1,
  };
  // repeated int32 cache_pages_list = 1;
  int cache_pages_list_size() const;
  private:
  int _internal_cache_pages_list_size() const;
  public:
  void clear_cache_pages_list();
  private:
  int32_t _internal_cache_pages_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cache_pages_list() const;
  void _internal_add_cache_pages_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cache_pages_list();
  public:
  int32_t cache_pages_list(int index) const;
  void set_cache_pages_list(int index, int32_t value);
  void add_cache_pages_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cache_pages_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cache_pages_list();

  // @@protoc_insertion_point(class_scope:PageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cache_pages_list_;
  mutable std::atomic<int> _cache_pages_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// -------------------------------------------------------------------

class TaskInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskInfoList) */ {
 public:
  inline TaskInfoList() : TaskInfoList(nullptr) {}
  ~TaskInfoList() override;
  explicit PROTOBUF_CONSTEXPR TaskInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskInfoList(const TaskInfoList& from);
  TaskInfoList(TaskInfoList&& from) noexcept
    : TaskInfoList() {
    *this = ::std::move(from);
  }

  inline TaskInfoList& operator=(const TaskInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInfoList& operator=(TaskInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskInfoList* internal_default_instance() {
    return reinterpret_cast<const TaskInfoList*>(
               &_TaskInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskInfoList& a, TaskInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskInfoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskInfoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskInfoList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskInfoList";
  }
  protected:
  explicit TaskInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
  };
  // repeated .TaskInfo tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::TaskInfo* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskInfo >*
      mutable_tasks();
  private:
  const ::TaskInfo& _internal_tasks(int index) const;
  ::TaskInfo* _internal_add_tasks();
  public:
  const ::TaskInfo& tasks(int index) const;
  ::TaskInfo* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskInfo >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:TaskInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskInfo > tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// -------------------------------------------------------------------

class ComfirmationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComfirmationMessage) */ {
 public:
  inline ComfirmationMessage() : ComfirmationMessage(nullptr) {}
  ~ComfirmationMessage() override;
  explicit PROTOBUF_CONSTEXPR ComfirmationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComfirmationMessage(const ComfirmationMessage& from);
  ComfirmationMessage(ComfirmationMessage&& from) noexcept
    : ComfirmationMessage() {
    *this = ::std::move(from);
  }

  inline ComfirmationMessage& operator=(const ComfirmationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComfirmationMessage& operator=(ComfirmationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComfirmationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComfirmationMessage* internal_default_instance() {
    return reinterpret_cast<const ComfirmationMessage*>(
               &_ComfirmationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ComfirmationMessage& a, ComfirmationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComfirmationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComfirmationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComfirmationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComfirmationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComfirmationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComfirmationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComfirmationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComfirmationMessage";
  }
  protected:
  explicit ComfirmationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:ComfirmationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// -------------------------------------------------------------------

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  ~StartRequest() override;
  explicit PROTOBUF_CONSTEXPR StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TaskInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IdTokenPair

// int32 id = 1;
inline void IdTokenPair::clear_id() {
  id_ = 0;
}
inline int32_t IdTokenPair::_internal_id() const {
  return id_;
}
inline int32_t IdTokenPair::id() const {
  // @@protoc_insertion_point(field_get:IdTokenPair.id)
  return _internal_id();
}
inline void IdTokenPair::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void IdTokenPair::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IdTokenPair.id)
}

// int32 token_num = 2;
inline void IdTokenPair::clear_token_num() {
  token_num_ = 0;
}
inline int32_t IdTokenPair::_internal_token_num() const {
  return token_num_;
}
inline int32_t IdTokenPair::token_num() const {
  // @@protoc_insertion_point(field_get:IdTokenPair.token_num)
  return _internal_token_num();
}
inline void IdTokenPair::_internal_set_token_num(int32_t value) {
  
  token_num_ = value;
}
inline void IdTokenPair::set_token_num(int32_t value) {
  _internal_set_token_num(value);
  // @@protoc_insertion_point(field_set:IdTokenPair.token_num)
}

// -------------------------------------------------------------------

// TaskInfo

// int32 request_id = 1;
inline void TaskInfo::clear_request_id() {
  request_id_ = 0;
}
inline int32_t TaskInfo::_internal_request_id() const {
  return request_id_;
}
inline int32_t TaskInfo::request_id() const {
  // @@protoc_insertion_point(field_get:TaskInfo.request_id)
  return _internal_request_id();
}
inline void TaskInfo::_internal_set_request_id(int32_t value) {
  
  request_id_ = value;
}
inline void TaskInfo::set_request_id(int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:TaskInfo.request_id)
}

// int32 id = 2;
inline void TaskInfo::clear_id() {
  id_ = 0;
}
inline int32_t TaskInfo::_internal_id() const {
  return id_;
}
inline int32_t TaskInfo::id() const {
  // @@protoc_insertion_point(field_get:TaskInfo.id)
  return _internal_id();
}
inline void TaskInfo::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void TaskInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TaskInfo.id)
}

// int32 infer_worker = 3;
inline void TaskInfo::clear_infer_worker() {
  infer_worker_ = 0;
}
inline int32_t TaskInfo::_internal_infer_worker() const {
  return infer_worker_;
}
inline int32_t TaskInfo::infer_worker() const {
  // @@protoc_insertion_point(field_get:TaskInfo.infer_worker)
  return _internal_infer_worker();
}
inline void TaskInfo::_internal_set_infer_worker(int32_t value) {
  
  infer_worker_ = value;
}
inline void TaskInfo::set_infer_worker(int32_t value) {
  _internal_set_infer_worker(value);
  // @@protoc_insertion_point(field_set:TaskInfo.infer_worker)
}

// int32 cache_worker = 4;
inline void TaskInfo::clear_cache_worker() {
  cache_worker_ = 0;
}
inline int32_t TaskInfo::_internal_cache_worker() const {
  return cache_worker_;
}
inline int32_t TaskInfo::cache_worker() const {
  // @@protoc_insertion_point(field_get:TaskInfo.cache_worker)
  return _internal_cache_worker();
}
inline void TaskInfo::_internal_set_cache_worker(int32_t value) {
  
  cache_worker_ = value;
}
inline void TaskInfo::set_cache_worker(int32_t value) {
  _internal_set_cache_worker(value);
  // @@protoc_insertion_point(field_set:TaskInfo.cache_worker)
}

// int32 token_num = 5;
inline void TaskInfo::clear_token_num() {
  token_num_ = 0;
}
inline int32_t TaskInfo::_internal_token_num() const {
  return token_num_;
}
inline int32_t TaskInfo::token_num() const {
  // @@protoc_insertion_point(field_get:TaskInfo.token_num)
  return _internal_token_num();
}
inline void TaskInfo::_internal_set_token_num(int32_t value) {
  
  token_num_ = value;
}
inline void TaskInfo::set_token_num(int32_t value) {
  _internal_set_token_num(value);
  // @@protoc_insertion_point(field_set:TaskInfo.token_num)
}

// int32 index = 6;
inline void TaskInfo::clear_index() {
  index_ = 0;
}
inline int32_t TaskInfo::_internal_index() const {
  return index_;
}
inline int32_t TaskInfo::index() const {
  // @@protoc_insertion_point(field_get:TaskInfo.index)
  return _internal_index();
}
inline void TaskInfo::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void TaskInfo::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TaskInfo.index)
}

// int32 task_type = 7;
inline void TaskInfo::clear_task_type() {
  task_type_ = 0;
}
inline int32_t TaskInfo::_internal_task_type() const {
  return task_type_;
}
inline int32_t TaskInfo::task_type() const {
  // @@protoc_insertion_point(field_get:TaskInfo.task_type)
  return _internal_task_type();
}
inline void TaskInfo::_internal_set_task_type(int32_t value) {
  
  task_type_ = value;
}
inline void TaskInfo::set_task_type(int32_t value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:TaskInfo.task_type)
}

// string type = 8;
inline void TaskInfo::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& TaskInfo::type() const {
  // @@protoc_insertion_point(field_get:TaskInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskInfo::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TaskInfo.type)
}
inline std::string* TaskInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:TaskInfo.type)
  return _s;
}
inline const std::string& TaskInfo::_internal_type() const {
  return type_.Get();
}
inline void TaskInfo::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskInfo::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskInfo::release_type() {
  // @@protoc_insertion_point(field_release:TaskInfo.type)
  return type_.Release();
}
inline void TaskInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TaskInfo.type)
}

// int32 task_num = 9;
inline void TaskInfo::clear_task_num() {
  task_num_ = 0;
}
inline int32_t TaskInfo::_internal_task_num() const {
  return task_num_;
}
inline int32_t TaskInfo::task_num() const {
  // @@protoc_insertion_point(field_get:TaskInfo.task_num)
  return _internal_task_num();
}
inline void TaskInfo::_internal_set_task_num(int32_t value) {
  
  task_num_ = value;
}
inline void TaskInfo::set_task_num(int32_t value) {
  _internal_set_task_num(value);
  // @@protoc_insertion_point(field_set:TaskInfo.task_num)
}

// repeated int32 cache_pages_list = 10;
inline int TaskInfo::_internal_cache_pages_list_size() const {
  return cache_pages_list_.size();
}
inline int TaskInfo::cache_pages_list_size() const {
  return _internal_cache_pages_list_size();
}
inline void TaskInfo::clear_cache_pages_list() {
  cache_pages_list_.Clear();
}
inline int32_t TaskInfo::_internal_cache_pages_list(int index) const {
  return cache_pages_list_.Get(index);
}
inline int32_t TaskInfo::cache_pages_list(int index) const {
  // @@protoc_insertion_point(field_get:TaskInfo.cache_pages_list)
  return _internal_cache_pages_list(index);
}
inline void TaskInfo::set_cache_pages_list(int index, int32_t value) {
  cache_pages_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TaskInfo.cache_pages_list)
}
inline void TaskInfo::_internal_add_cache_pages_list(int32_t value) {
  cache_pages_list_.Add(value);
}
inline void TaskInfo::add_cache_pages_list(int32_t value) {
  _internal_add_cache_pages_list(value);
  // @@protoc_insertion_point(field_add:TaskInfo.cache_pages_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TaskInfo::_internal_cache_pages_list() const {
  return cache_pages_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TaskInfo::cache_pages_list() const {
  // @@protoc_insertion_point(field_list:TaskInfo.cache_pages_list)
  return _internal_cache_pages_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TaskInfo::_internal_mutable_cache_pages_list() {
  return &cache_pages_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TaskInfo::mutable_cache_pages_list() {
  // @@protoc_insertion_point(field_mutable_list:TaskInfo.cache_pages_list)
  return _internal_mutable_cache_pages_list();
}

// -------------------------------------------------------------------

// CombindedTaskInfo

// int32 request_id = 1;
inline void CombindedTaskInfo::clear_request_id() {
  request_id_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_request_id() const {
  return request_id_;
}
inline int32_t CombindedTaskInfo::request_id() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.request_id)
  return _internal_request_id();
}
inline void CombindedTaskInfo::_internal_set_request_id(int32_t value) {
  
  request_id_ = value;
}
inline void CombindedTaskInfo::set_request_id(int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.request_id)
}

// int32 id = 2;
inline void CombindedTaskInfo::clear_id() {
  id_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_id() const {
  return id_;
}
inline int32_t CombindedTaskInfo::id() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.id)
  return _internal_id();
}
inline void CombindedTaskInfo::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void CombindedTaskInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.id)
}

// int32 infer_worker = 3;
inline void CombindedTaskInfo::clear_infer_worker() {
  infer_worker_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_infer_worker() const {
  return infer_worker_;
}
inline int32_t CombindedTaskInfo::infer_worker() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.infer_worker)
  return _internal_infer_worker();
}
inline void CombindedTaskInfo::_internal_set_infer_worker(int32_t value) {
  
  infer_worker_ = value;
}
inline void CombindedTaskInfo::set_infer_worker(int32_t value) {
  _internal_set_infer_worker(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.infer_worker)
}

// int32 cache_worker = 4;
inline void CombindedTaskInfo::clear_cache_worker() {
  cache_worker_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_cache_worker() const {
  return cache_worker_;
}
inline int32_t CombindedTaskInfo::cache_worker() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.cache_worker)
  return _internal_cache_worker();
}
inline void CombindedTaskInfo::_internal_set_cache_worker(int32_t value) {
  
  cache_worker_ = value;
}
inline void CombindedTaskInfo::set_cache_worker(int32_t value) {
  _internal_set_cache_worker(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.cache_worker)
}

// int32 token_num = 5;
inline void CombindedTaskInfo::clear_token_num() {
  token_num_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_token_num() const {
  return token_num_;
}
inline int32_t CombindedTaskInfo::token_num() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.token_num)
  return _internal_token_num();
}
inline void CombindedTaskInfo::_internal_set_token_num(int32_t value) {
  
  token_num_ = value;
}
inline void CombindedTaskInfo::set_token_num(int32_t value) {
  _internal_set_token_num(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.token_num)
}

// int32 index = 6;
inline void CombindedTaskInfo::clear_index() {
  index_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_index() const {
  return index_;
}
inline int32_t CombindedTaskInfo::index() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.index)
  return _internal_index();
}
inline void CombindedTaskInfo::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void CombindedTaskInfo::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.index)
}

// int32 task_type = 7;
inline void CombindedTaskInfo::clear_task_type() {
  task_type_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_task_type() const {
  return task_type_;
}
inline int32_t CombindedTaskInfo::task_type() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.task_type)
  return _internal_task_type();
}
inline void CombindedTaskInfo::_internal_set_task_type(int32_t value) {
  
  task_type_ = value;
}
inline void CombindedTaskInfo::set_task_type(int32_t value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.task_type)
}

// string type = 8;
inline void CombindedTaskInfo::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& CombindedTaskInfo::type() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CombindedTaskInfo::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.type)
}
inline std::string* CombindedTaskInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CombindedTaskInfo.type)
  return _s;
}
inline const std::string& CombindedTaskInfo::_internal_type() const {
  return type_.Get();
}
inline void CombindedTaskInfo::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* CombindedTaskInfo::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* CombindedTaskInfo::release_type() {
  // @@protoc_insertion_point(field_release:CombindedTaskInfo.type)
  return type_.Release();
}
inline void CombindedTaskInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CombindedTaskInfo.type)
}

// int32 task_num = 9;
inline void CombindedTaskInfo::clear_task_num() {
  task_num_ = 0;
}
inline int32_t CombindedTaskInfo::_internal_task_num() const {
  return task_num_;
}
inline int32_t CombindedTaskInfo::task_num() const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.task_num)
  return _internal_task_num();
}
inline void CombindedTaskInfo::_internal_set_task_num(int32_t value) {
  
  task_num_ = value;
}
inline void CombindedTaskInfo::set_task_num(int32_t value) {
  _internal_set_task_num(value);
  // @@protoc_insertion_point(field_set:CombindedTaskInfo.task_num)
}

// repeated .PageList cache_pages_list = 10;
inline int CombindedTaskInfo::_internal_cache_pages_list_size() const {
  return cache_pages_list_.size();
}
inline int CombindedTaskInfo::cache_pages_list_size() const {
  return _internal_cache_pages_list_size();
}
inline void CombindedTaskInfo::clear_cache_pages_list() {
  cache_pages_list_.Clear();
}
inline ::PageList* CombindedTaskInfo::mutable_cache_pages_list(int index) {
  // @@protoc_insertion_point(field_mutable:CombindedTaskInfo.cache_pages_list)
  return cache_pages_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PageList >*
CombindedTaskInfo::mutable_cache_pages_list() {
  // @@protoc_insertion_point(field_mutable_list:CombindedTaskInfo.cache_pages_list)
  return &cache_pages_list_;
}
inline const ::PageList& CombindedTaskInfo::_internal_cache_pages_list(int index) const {
  return cache_pages_list_.Get(index);
}
inline const ::PageList& CombindedTaskInfo::cache_pages_list(int index) const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.cache_pages_list)
  return _internal_cache_pages_list(index);
}
inline ::PageList* CombindedTaskInfo::_internal_add_cache_pages_list() {
  return cache_pages_list_.Add();
}
inline ::PageList* CombindedTaskInfo::add_cache_pages_list() {
  ::PageList* _add = _internal_add_cache_pages_list();
  // @@protoc_insertion_point(field_add:CombindedTaskInfo.cache_pages_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PageList >&
CombindedTaskInfo::cache_pages_list() const {
  // @@protoc_insertion_point(field_list:CombindedTaskInfo.cache_pages_list)
  return cache_pages_list_;
}

// repeated .IdTokenPair id_token_pair = 11;
inline int CombindedTaskInfo::_internal_id_token_pair_size() const {
  return id_token_pair_.size();
}
inline int CombindedTaskInfo::id_token_pair_size() const {
  return _internal_id_token_pair_size();
}
inline void CombindedTaskInfo::clear_id_token_pair() {
  id_token_pair_.Clear();
}
inline ::IdTokenPair* CombindedTaskInfo::mutable_id_token_pair(int index) {
  // @@protoc_insertion_point(field_mutable:CombindedTaskInfo.id_token_pair)
  return id_token_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IdTokenPair >*
CombindedTaskInfo::mutable_id_token_pair() {
  // @@protoc_insertion_point(field_mutable_list:CombindedTaskInfo.id_token_pair)
  return &id_token_pair_;
}
inline const ::IdTokenPair& CombindedTaskInfo::_internal_id_token_pair(int index) const {
  return id_token_pair_.Get(index);
}
inline const ::IdTokenPair& CombindedTaskInfo::id_token_pair(int index) const {
  // @@protoc_insertion_point(field_get:CombindedTaskInfo.id_token_pair)
  return _internal_id_token_pair(index);
}
inline ::IdTokenPair* CombindedTaskInfo::_internal_add_id_token_pair() {
  return id_token_pair_.Add();
}
inline ::IdTokenPair* CombindedTaskInfo::add_id_token_pair() {
  ::IdTokenPair* _add = _internal_add_id_token_pair();
  // @@protoc_insertion_point(field_add:CombindedTaskInfo.id_token_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IdTokenPair >&
CombindedTaskInfo::id_token_pair() const {
  // @@protoc_insertion_point(field_list:CombindedTaskInfo.id_token_pair)
  return id_token_pair_;
}

// -------------------------------------------------------------------

// PageList

// repeated int32 cache_pages_list = 1;
inline int PageList::_internal_cache_pages_list_size() const {
  return cache_pages_list_.size();
}
inline int PageList::cache_pages_list_size() const {
  return _internal_cache_pages_list_size();
}
inline void PageList::clear_cache_pages_list() {
  cache_pages_list_.Clear();
}
inline int32_t PageList::_internal_cache_pages_list(int index) const {
  return cache_pages_list_.Get(index);
}
inline int32_t PageList::cache_pages_list(int index) const {
  // @@protoc_insertion_point(field_get:PageList.cache_pages_list)
  return _internal_cache_pages_list(index);
}
inline void PageList::set_cache_pages_list(int index, int32_t value) {
  cache_pages_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:PageList.cache_pages_list)
}
inline void PageList::_internal_add_cache_pages_list(int32_t value) {
  cache_pages_list_.Add(value);
}
inline void PageList::add_cache_pages_list(int32_t value) {
  _internal_add_cache_pages_list(value);
  // @@protoc_insertion_point(field_add:PageList.cache_pages_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PageList::_internal_cache_pages_list() const {
  return cache_pages_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PageList::cache_pages_list() const {
  // @@protoc_insertion_point(field_list:PageList.cache_pages_list)
  return _internal_cache_pages_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PageList::_internal_mutable_cache_pages_list() {
  return &cache_pages_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PageList::mutable_cache_pages_list() {
  // @@protoc_insertion_point(field_mutable_list:PageList.cache_pages_list)
  return _internal_mutable_cache_pages_list();
}

// -------------------------------------------------------------------

// TaskInfoList

// repeated .TaskInfo tasks = 1;
inline int TaskInfoList::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TaskInfoList::tasks_size() const {
  return _internal_tasks_size();
}
inline void TaskInfoList::clear_tasks() {
  tasks_.Clear();
}
inline ::TaskInfo* TaskInfoList::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:TaskInfoList.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskInfo >*
TaskInfoList::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:TaskInfoList.tasks)
  return &tasks_;
}
inline const ::TaskInfo& TaskInfoList::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::TaskInfo& TaskInfoList::tasks(int index) const {
  // @@protoc_insertion_point(field_get:TaskInfoList.tasks)
  return _internal_tasks(index);
}
inline ::TaskInfo* TaskInfoList::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::TaskInfo* TaskInfoList::add_tasks() {
  ::TaskInfo* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:TaskInfoList.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskInfo >&
TaskInfoList::tasks() const {
  // @@protoc_insertion_point(field_list:TaskInfoList.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// ComfirmationMessage

// string msg = 1;
inline void ComfirmationMessage::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ComfirmationMessage::msg() const {
  // @@protoc_insertion_point(field_get:ComfirmationMessage.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComfirmationMessage::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ComfirmationMessage.msg)
}
inline std::string* ComfirmationMessage::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:ComfirmationMessage.msg)
  return _s;
}
inline const std::string& ComfirmationMessage::_internal_msg() const {
  return msg_.Get();
}
inline void ComfirmationMessage::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ComfirmationMessage::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ComfirmationMessage::release_msg() {
  // @@protoc_insertion_point(field_release:ComfirmationMessage.msg)
  return msg_.Release();
}
inline void ComfirmationMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ComfirmationMessage.msg)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// StartRequest

// string msg = 1;
inline void StartRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& StartRequest::msg() const {
  // @@protoc_insertion_point(field_get:StartRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StartRequest.msg)
}
inline std::string* StartRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:StartRequest.msg)
  return _s;
}
inline const std::string& StartRequest::_internal_msg() const {
  return msg_.Get();
}
inline void StartRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* StartRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* StartRequest::release_msg() {
  // @@protoc_insertion_point(field_release:StartRequest.msg)
  return msg_.Release();
}
inline void StartRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StartRequest.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Signal> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Signal>() {
  return ::Signal_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TaskInfo_2eproto
